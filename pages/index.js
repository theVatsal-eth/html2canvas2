import Head from 'next/head'
import Image from 'next/image'
import { useRef, useState } from 'react'
import html2canvas from 'html2canvas'
import Nav from '../components/Nav'

export default function Home() {

  const defaultDesc = "Hey ðŸ‘‹, I am a blockchain learner and a frontend developer!"
  const defaultSkills = ["HTML", "CSS", "JS", "ReactJS", "NextJS", "NodeJS", "Ethers.js", "Hardhat"]

  const [editMode, setEditMode] = useState(false)
  const [name, setName] = useState("Vatsal Awadhiya")
  const [desc, setDesc] = useState(defaultDesc)
  const [skills, setSkills] = useState(defaultSkills)
  const [ captureCall, setCaptureCall ] = useState(false)

  const captureRef = useRef(<></>)

  const formSubmit = () => {
    console.log("end submission")
    setEditMode(false)
    console.log("end submission mode set")

  }

  const handleNameChange = (e) => {
    if (e.target.value == "") {
      setName("Vatsal Awadhiya")
    } else {
      setName(e.target.value)
    }
  }

  const handleDescChange = (e) => {
    if (e.target.value == "") {
      setDesc(defaultDesc)
    } else {
      setDesc(e.target.value)
    }
  }

  const handleSkillChange = (e) => {
    if (e.target.value == "") {
      setSkills(defaultSkills)
    } else {
      const value = e.target.value
      const skills = value.split(",")
      setSkills(skills)
    }
  }

  console.log(captureRef.current)

  const [ canvas, setCanvas ] = useState(<></>)

  const capture = async () => {
    setCaptureCall(true)
    console.log("in Capture call")
    const canvasl = await html2canvas(captureRef.current)
    console.log("after canvasing")
    console.log(canvasl)
    setCanvas(canvasl)
  }

  return (
    <div className="m-0 p-0 bg-[#1B2430] text-[#D6D5A8]" >
      <Head>
        <title>Profile Card Imager</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Nav />

      <div className="h-screen flex flex-col justify-center items-center gap-10">

        <div ref={captureRef} id="profile-card" className="flex flex-col p-6 gap-5 items-center bg-[#51557E] rounded-3xl max-w-lg">

          <h2 className="text-3xl font-medium">Profile Card</h2>

          <div className="flex justify-center items-center gap-5">
            <img className="max-h-[400px] max-w-[200px] rounded-3xl border border-gray-400 p-3" src="/profile.png" />

            <div className="text-lg flex flex-col justify-start items-start gap-3 flex-wrap">
              <div className=""><span className="underline">Name</span> : <strong id="name-field" className="text-2xl">{name}</strong></div>
              <div>
                <span className="underline">Description</span>: &nbsp;
                <span id="description" className="font-medium text-lg">{desc}</span>
              </div>
              <div className='flex flex-wrap gap-1.5'>
                <span className="underline">Skills</span>:&nbsp;
                {skills.map(skill => (
                  <span key={skill} className="bg-[#603783] font-semibold p-1 rounded-lg">{skill}</span>
                ))}
              </div>
            </div>
          </div>
        </div>
        {
          editMode ? (
            <div>
              <form className='text-lg flex flex-col gap-3'>
                <label className='flex justify-between gap-3'>
                  <span><b>Name</b> :&nbsp;</span>
                  <input className='text-black' type="text" name='name' onChange={(e) => handleNameChange(e)} />
                </label>
                <em className='text-sm self-end'>(Description should be less than or equal to 120 letters)</em>
                <label className='flex justify-between gap-3'>
                  <span><b>Description</b>:&nbsp;</span>
                  <textarea className='text-black' type="text" name='desc' onChange={(e) => handleDescChange(e)} />
                </label>
                <em className='text-sm self-end'>(Enter skills seperated by commas)</em>
                <label className='flex justify-between gap-3'>
                  <span><b>Skills</b> :&nbsp;</span>
                  <input className='text-black' type="text" name='skill' onChange={(e) => handleSkillChange(e)} />
                </label>
              </form>
            </div>
          ) : ""
        }


        <div className="flex justify-around gap-10">
          {!editMode ? (
            <>
              <button className="bg-blue-600 rounded-lg p-3 text-xl font-semibold border-none outline-none" onClick={() => capture()}>Capture</button>
              <button className="bg-blue-600 rounded-lg p-3 text-xl font-semibold border-none outline-none" onClick={() => {
                setEditMode(true)
                setCaptureCall(false)
              }}>Edit</button>
            </>
          ) : (<button className="bg-blue-600 rounded-lg p-3 text-xl font-semibold border-none outline-none" onClick={() => formSubmit()}>End Editing</button>)}
        </div>
        
        {
          captureCall ? (
            <a download={"profile"} href={canvas.toDataURL("image/png", 1.0)}>{/* <img className='rounded-3xl' src={canvas.toDataURL("image/png", 1.0)} /> */}Open Image</a>
          ) : ""
        }

      </div>
    </div>
  )
}
